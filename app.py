# app.py ‚Äî Phi√™n b·∫£n 4.2
# ·ª®ng d·ª•ng tra c·ª©u th·ªùi ti·∫øt + Chatbot AI (Mixtral) + ch·∫ø ƒë·ªô d·ª± ph√≤ng offline
# Y√™u c·∫ßu: pip install streamlit pandas requests plotly

import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from datetime import datetime

# ===== C·∫•u h√¨nh trang =====
st.set_page_config(
    page_title="·ª®NG D·ª§NG TRA C·ª®U TH·ªúI TI·∫æT TH·ªúI GIAN TH·ª∞C",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===== CSS t·ªïng th·ªÉ =====
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700;900&display=swap');
html, body, [class*="css"]  {
  font-family: 'Roboto', sans-serif;
}
.stApp {
    background: linear-gradient(135deg, #0f4c81, #146c9a, #1aa7b8);
    color: white;
}
.neon-title {
    text-align: center;
    margin-top: 15px;
    font-weight: 900;
    font-size: 36px;
    text-transform: uppercase;
    letter-spacing: 1px;
    line-height: 1.3em;
    color: #fff;
    text-shadow:
      0 0 5px #fff,
      0 0 10px #4fc3dc,
      0 0 20px #4fc3dc,
      0 0 40px #6a5acd,
      0 0 80px #6a5acd;
    animation: flicker 3s infinite alternate;
}
@keyframes flicker {
  0% { opacity:1; text-shadow:0 0 6px #fff,0 0 12px #4fc3dc;}
  50%{opacity:0.85;text-shadow:0 0 6px #fff,0 0 12px #6a5acd;}
  100%{opacity:1;text-shadow:0 0 8px #fff,0 0 16px #00ffff;}
}
.panel {
    background: rgba(255,255,255,0.08);
    border-radius: 12px;
    padding: 18px;
    margin-top: 18px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.25);
    border: 1px solid rgba(255,255,255,0.25);
}
.panel h3 {
    color: #fff;
    font-weight: 700;
    border-bottom: 1px solid rgba(255,255,255,0.3);
    padding-bottom: 5px;
    margin-bottom: 10px;
}
section[data-testid="stSidebar"] {
    background: rgba(255,255,255,0.1);
}
.stButton > button {
    background-color: #ffffff;
    color: #002B5B !important;
    border-radius: 8px;
    font-weight: 700;
    border: 2px solid #002B5B;
    transition: 0.3s;
}
.stButton > button:hover {
    background-color: #00BFFF;
    color: white !important;
    border: 2px solid #ffffff;
    transform: scale(1.05);
}
.footer {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  background: rgba(0, 43, 91, 0.98);
  color: white;
  text-align: center;
  padding: 8px 0;
  font-size: 15px;
  font-weight: 600;
  z-index: 9999;
}
.chatbox {
    background-color: rgba(255,255,255,0.08);
    border-radius: 10px;
    padding: 15px;
    max-height: 400px;
    overflow-y: auto;
}
.chat-input textarea {
    border-radius: 8px;
}
</style>
""", unsafe_allow_html=True)

# ===== Ti√™u ƒë·ªÅ =====
st.markdown("""
<div class="neon-title">
  ·ª®NG D·ª§NG TRA C·ª®U TH√îNG S·ªê<br>TH·ªúI TI·∫æT TH·ªúI GIAN TH·ª∞C
</div>
""", unsafe_allow_html=True)

# ===== 34 t·ªânh/th√†nh =====
PROVINCES_34 = {
    "An Giang": (10.5230, 105.1259),
    "B·∫Øc Ninh": (21.1867, 106.0833),
    "C√† Mau": (9.1763, 105.1524),
    "ƒê·∫Øk L·∫Øk": (12.6667, 108.0500),
    "ƒê·ªìng Nai": (10.9453, 106.8246),
    "ƒê·ªìng Th√°p": (10.4938, 105.6885),
    "Gia Lai": (13.9833, 108.0000),
    "H∆∞ng Y√™n": (20.6597, 106.0704),
    "Kh√°nh H√≤a": (12.2388, 109.1967),
    "L√†o Cai": (22.4833, 103.9667),
    "L√¢m ƒê·ªìng": (11.9404, 108.4583),
    "Ninh B√¨nh": (20.2510, 105.9743),
    "Ph√∫ Th·ªç": (21.3579, 103.8333),
    "Qu·∫£ng Ng√£i": (15.1217, 108.8011),
    "Qu·∫£ng Tr·ªã": (16.7445, 107.1839),
    "T√¢y Ninh": (11.3333, 106.1667),
    "Th√°i Nguy√™n": (21.6000, 105.8500),
    "Tuy√™n Quang": (21.8167, 105.2333),
    "Vƒ©nh Long": (10.2430, 105.9750),
    "TP. C·∫ßn Th∆°": (10.0452, 105.7469),
    "TP. ƒê√† N·∫µng": (16.0544, 108.2022),
    "TP. H·∫£i Ph√≤ng": (20.8449, 106.6881),
    "TP. H·ªì Ch√≠ Minh": (10.8231, 106.6297),
    "Cao B·∫±ng": (22.6667, 106.2500),
    "ƒêi·ªán Bi√™n": (21.3856, 103.0239),
    "H√† Tƒ©nh": (18.3432, 105.9057),
    "Lai Ch√¢u": (22.3833, 103.9333),
    "L·∫°ng S∆°n": (21.8468, 106.7585),
    "Ngh·ªá An": (19.2676, 104.9997),
    "Qu·∫£ng Ninh": (21.0138, 107.9572),
    "Thanh H√≥a": (19.8067, 105.7768),
    "S∆°n La": (21.3256, 103.9149),
    "TP. H√† N·ªôi": (21.0285, 105.8542),
    "TP. Hu·∫ø": (16.4637, 107.5909)
}

# ===== Sidebar =====
st.sidebar.header("üß≠ C·∫•u h√¨nh")
selected_place = st.sidebar.selectbox("Ch·ªçn t·ªânh/th√†nh:", list(PROVINCES_34.keys()))
params = ["üå°Ô∏è Nhi·ªát ƒë·ªô (¬∞C)", "üíß ƒê·ªô ·∫©m (%)", "üåßÔ∏è L∆∞·ª£ng m∆∞a (mm)", "üí® T·ªëc ƒë·ªô gi√≥ (m/s)", "‚òÄÔ∏è Ch·ªâ s·ªë UV"]
selected_params = st.sidebar.multiselect("Ch·ªçn th√¥ng s·ªë hi·ªÉn th·ªã:", options=params, default=params[:3])
allow_csv = st.sidebar.checkbox("üíæ Cho ph√©p xu·∫•t d·ªØ li·ªáu CSV", value=True)

# ===== H√†m l·∫•y d·ªØ li·ªáu t·ª´ API th·ªùi ti·∫øt =====
def fetch_weather(lat, lon):
    tz = "Asia/Ho_Chi_Minh"
    p = "temperature_2m,relative_humidity_2m,precipitation,wind_speed_10m,uv_index"
    url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&hourly={p}&timezone={tz}"
    r = requests.get(url, timeout=10)
    r.raise_for_status()
    data = r.json().get("hourly", {})
    df = pd.DataFrame({
        "Th·ªùi gian": data.get("time", []),
        "üå°Ô∏è Nhi·ªát ƒë·ªô (¬∞C)": data.get("temperature_2m", []),
        "üíß ƒê·ªô ·∫©m (%)": data.get("relative_humidity_2m", []),
        "üåßÔ∏è L∆∞·ª£ng m∆∞a (mm)": data.get("precipitation", []),
        "üí® T·ªëc ƒë·ªô gi√≥ (m/s)": data.get("wind_speed_10m", []),
        "‚òÄÔ∏è Ch·ªâ s·ªë UV": data.get("uv_index", [])
    })
    if not df.empty:
        df["Th·ªùi gian"] = pd.to_datetime(df["Th·ªùi gian"])
    return df
# ===== PH·∫¶N 2: Chatbot AI + ch·∫ø ƒë·ªô d·ª± ph√≤ng offline =====

# API Hugging Face (Mixtral-8x7B-Instruct)
API_KEY = "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"  # üîë D√°n token Hugging Face c·ªßa Th·∫ßy v√†o ƒë√¢y

# --- H√†m Chatbot AI ---
def ask_chatbot(user_question: str):
    """
    Tr·∫£ l·ªùi c√¢u h·ªèi t·ª´ h·ªçc sinh.
    ∆Øu ti√™n g·ªçi API Mixtral (Hugging Face).
    N·∫øu kh√¥ng c√≥ m·∫°ng ho·∫∑c l·ªói quota ‚Üí tr·∫£ l·ªùi t·ª´ b·ªô d·ªØ li·ªáu d·ª± ph√≤ng.
    """
    try:
        # === G·ªåI API TH·∫¨T T·∫†I ƒê√ÇY ===
        # N·∫øu mu·ªën k√≠ch ho·∫°t Chatbot online, b·ªè d·∫•u # ·ªü c√°c d√≤ng d∆∞·ªõi v√† nh·∫≠p API_KEY th·∫≠t
        # response = requests.post(
        #     "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct",
        #     headers={"Authorization": f"Bearer {API_KEY}"},
        #


        # Gi·∫£ s·ª≠ API b·ªã l·ªói, chuy·ªÉn sang d·ª± ph√≤ng:
        raise Exception("API not active in demo mode")

    except Exception:
        # N·∫øu API l·ªói, t√¨m trong c∆° s·ªü d·ªØ li·ªáu d·ª± ph√≤ng
        return find_offline_answer(user_question)


# ===== D·ªØ li·ªáu d·ª± ph√≤ng (FAQ offline) =====
FAQ_DATA = [
    {"q": "nhi·ªát ƒë·ªô l√† g√¨", "a": "Nhi·ªát ƒë·ªô cho bi·∫øt m·ª©c ƒë·ªô n√≥ng hay l·∫°nh c·ªßa m·ªôt v·∫≠t ho·∫∑c m√¥i tr∆∞·ªùng. ƒê∆°n v·ªã th∆∞·ªùng d√πng l√† ¬∞C."},
    {"q": "v√¨ sao tr·ªùi m∆∞a", "a": "Tr·ªùi m∆∞a khi h∆°i n∆∞·ªõc trong kh√≠ quy·ªÉn ng∆∞ng t·ª• th√†nh gi·ªçt n∆∞·ªõc ƒë·ªß n·∫∑ng ƒë·ªÉ r∆°i xu·ªëng."},
    {"q": "ch·ªâ s·ªë uv l√† g√¨", "a": "Ch·ªâ s·ªë UV th·ªÉ hi·ªán c∆∞·ªùng ƒë·ªô tia c·ª±c t√≠m t·ª´ M·∫∑t Tr·ªùi. Ch·ªâ s·ªë c√†ng cao c√†ng d·ªÖ g√¢y h·∫°i da."},
    {"q": "v√¨ sao c√≥ gi√≥", "a": "Gi√≥ h√¨nh th√†nh do s·ª± ch√™nh l·ªách √°p su·∫•t gi·ªØa c√°c v√πng kh√≠ quy·ªÉn, kh√¥ng kh√≠ di chuy·ªÉn t·ª´ n∆°i √°p cao sang √°p th·∫•p."},
    {"q": "ƒë·ªô ·∫©m l√† g√¨", "a": "ƒê·ªô ·∫©m cho bi·∫øt l∆∞·ª£ng h∆°i n∆∞·ªõc c√≥ trong kh√¥ng kh√≠. Khi ƒë·ªô ·∫©m cao, kh√¥ng kh√≠ ·∫©m ∆∞·ªõt v√† d·ªÖ g√¢y c·∫£m gi√°c oi b·ª©c."},
    {"q": "v√¨ sao c√≥ b√£o", "a": "B√£o h√¨nh th√†nh khi v√πng √°p th·∫•p tr√™n ƒë·∫°i d∆∞∆°ng h√∫t kh√¥ng kh√≠ ·∫©m, t·∫°o th√†nh xo√°y m·∫°nh quanh t√¢m."},
    {"q": "t·ªëc ƒë·ªô gi√≥ bao nhi√™u l√† m·∫°nh", "a": "Khi gi√≥ tr√™n 10 m/s (36 km/h) ƒë√£ ƒë∆∞·ª£c xem l√† gi√≥ m·∫°nh, c√≥ th·ªÉ l√†m ƒë·ªï c√¢y nh·ªè ho·∫∑c g√¢y nguy hi·ªÉm."},
    {"q": "nhi·ªát ƒë·ªô trung b√¨nh vi·ªát nam", "a": "Vi·ªát Nam c√≥ nhi·ªát ƒë·ªô trung b√¨nh nƒÉm kho·∫£ng 25‚Äì27¬∞C, t√πy v√πng mi·ªÅn."},
    {"q": "v√¨ sao bu·ªïi s√°ng c√≥ s∆∞∆°ng m√π", "a": "S∆∞∆°ng m√π xu·∫•t hi·ªán khi h∆°i n∆∞·ªõc g·∫ßn m·∫∑t ƒë·∫•t ng∆∞ng t·ª• do kh√¥ng kh√≠ l·∫°nh v√†o ban ƒë√™m."},
    {"q": "kh√≠ h·∫≠u nhi·ªát ƒë·ªõi l√† g√¨", "a": "Kh√≠ h·∫≠u nhi·ªát ƒë·ªõi c√≥ ƒë·∫∑c ƒëi·ªÉm n√≥ng ·∫©m, m∆∞a nhi·ªÅu, nhi·ªát ƒë·ªô trung b√¨nh cao quanh nƒÉm."},
]

# === G·ª£i √Ω th√™m 90 c√¢u h·ªèi kh√°c (Th·∫ßy c√≥ th·ªÉ m·ªü r·ªông) ===
for i in range(11, 101):
    FAQ_DATA.append({
        "q": f"c√¢u h·ªèi ph·ªï bi·∫øn {i}",
        "a": f"ƒê√¢y l√† c√¢u tr·∫£ l·ªùi d·ª± ph√≤ng m·∫´u cho c√¢u h·ªèi ph·ªï bi·∫øn s·ªë {i}. Th·∫ßy c√≥ th·ªÉ thay th·∫ø n·ªôi dung n√†y b·∫±ng th√¥ng tin th·ª±c t·∫ø."
    })


def find_offline_answer(user_question: str) -> str:
    """
    T√¨m c√¢u tr·∫£ l·ªùi d·ª± ph√≤ng trong danh s√°ch FAQ_DATA theo t·ª´ kh√≥a.
    """
    uq = user_question.lower()
    for item in FAQ_DATA:
        if any(keyword in uq for keyword in item["q"].split()):
            return item["a"]
    return "Xin l·ªói, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi n√†y. Em c√≥ th·ªÉ h·ªèi l·∫°i theo c√°ch kh√°c nh√©."


# ===== Giao di·ªán khung Chatbot =====
st.markdown('<div class="panel">', unsafe_allow_html=True)
st.markdown("### ü§ñ Chatbot AI ‚Äì H·ªèi ƒë√°p v·ªÅ Th·ªùi ti·∫øt & Kh√≠ h·∫≠u")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# √î nh·∫≠p c√¢u h·ªèi
user_input = st.text_input("üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa em (v√≠ d·ª•: 'V√¨ sao tr·ªùi n√≥ng h∆°n v√†o m√πa h√®?')")

if st.button("üöÄ G·ª≠i c√¢u h·ªèi"):
    if user_input.strip():
        answer = ask_chatbot(user_input)
        st.session_state.chat_history.append(("H·ªçc sinh", user_input))
        st.session_state.chat_history.append(("Chatbot", answer))

# Hi·ªÉn th·ªã h·ªôi tho·∫°i
chat_box = st.container()
with chat_box:
    st.markdown('<div class="chatbox">', unsafe_allow_html=True)
    for role, text in st.session_state.chat_history:
        if role == "H·ªçc sinh":
            st.markdown(f"üßë‚Äçüéì **{role}:** {text}")
        else:
            st.markdown(f"ü§ñ **{role}:** {text}")
    st.markdown('</div>', unsafe_allow_html=True)

st.markdown('</div>', unsafe_allow_html=True)

# ===== Footer =====
st.markdown("""
<div class="footer">
¬© 2025 Tr∆∞·ªùng THPT L√™ Qu√Ω ƒê√¥n ‚Äì Long B√¨nh T√¢n | Web app thu th·∫≠p d·ªØ li·ªáu th·ªùi gian th·ª±c
</div>
""", unsafe_allow_html=True)
