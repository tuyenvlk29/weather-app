# app.py
# Streamlit app: ·ª®ng d·ª•ng thu th·∫≠p d·ªØ li·ªáu th·ªùi ti·∫øt th·ªùi gian th·ª±c cho 34 t·ªânh/th√†nh (theo y√™u c·∫ßu Th·∫ßy)
# API template (do Th·∫ßy cung c·∫•p):
# https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current=temperature_2m,wind_speed_10m,relative_humidity_2m,precipitation

import streamlit as st
import pandas as pd
import requests
from datetime import datetime
import time
import json

st.set_page_config(page_title="Th·ªùi ti·∫øt th·ªùi gian th·ª±c - THPT L√™ Qu√Ω ƒê√¥n", layout="wide")

# ---------- CSS footer c·ªë ƒë·ªãnh ----------
st.markdown("""
<style>
.fixed-footer {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  text-align: center;
  background-color: rgba(230,240,255,0.95);
  color: #000;
  padding: 8px 0;
  font-size: 14px;
  border-top: 1px solid #d0d7e6;
  z-index: 9999;
}
.stApp { margin-bottom: 70px; }
</style>
""", unsafe_allow_html=True)

# ---------- Header ----------
st.title("üå¶ ·ª®ng d·ª•ng Th·ªùi ti·∫øt Th·ªùi gian th·ª±c ‚Äî THPT L√™ Qu√Ω ƒê√¥n")
st.markdown("·ª®ng d·ª•ng d√πng API Open-Meteo (theo m·∫´u do Th·∫ßy cung c·∫•p) ‚Äî l·∫•y Nhi·ªát ƒë·ªô, T·ªëc ƒë·ªô gi√≥, ƒê·ªô ·∫©m, L∆∞·ª£ng m∆∞a.")

# ---------- Load default 34 t·ªânh/th√†nh ----------
try:
    df_places = pd.read_csv("/mnt/data/34_tinh_thanh.csv")
except Exception:
    # fallback embedded list if file not found
    data = [
        ("An Giang", 10.3692, 105.4389),
        ("B·∫Øc Ninh", 21.1867, 106.0833),
        ("C√† Mau", 9.1741, 105.1520),
        ("ƒê·∫Øk L·∫Øk", 12.6667, 108.0500),
        ("ƒê·ªìng Nai", 10.9468, 106.8240),
        ("ƒê·ªìng Th√°p", 10.5326, 105.6740),
        ("Gia Lai", 13.9833, 108.0000),
        ("H∆∞ng Y√™n", 20.6597, 106.0704),
        ("Kh√°nh H√≤a", 12.2388, 109.1967),
        ("L√†o Cai", 22.4833, 103.9667),
        ("L√¢m ƒê·ªìng", 11.9404, 108.4583),
        ("Ninh B√¨nh", 20.2510, 105.9743),
        ("Ph√∫ Th·ªç", 21.3579, 103.8333),
        ("Qu·∫£ng Ng√£i", 15.1217, 108.8011),
        ("Qu·∫£ng Tr·ªã", 16.7445, 107.1839),
        ("T√¢y Ninh", 11.3333, 106.1667),
        ("Th√°i Nguy√™n", 21.5926, 105.8432),
        ("Tuy√™n Quang", 21.8236, 105.2190),
        ("Vƒ©nh Long", 10.2442, 105.9716),
        ("C·∫ßn Th∆°", 10.0452, 105.7469),
        ("ƒê√† N·∫µng", 16.0544, 108.2022),
        ("H·∫£i Ph√≤ng", 20.8449, 106.6881),
        ("TP. H·ªì Ch√≠ Minh", 10.8231, 106.6297),
        ("Cao B·∫±ng", 22.6667, 106.2500),
        ("ƒêi·ªán Bi√™n", 21.3856, 103.0239),
        ("H√† Tƒ©nh", 18.3432, 105.9057),
        ("Lai Ch√¢u", 22.3833, 103.9333),
        ("L·∫°ng S∆°n", 21.8468, 106.7585),
        ("Ngh·ªá An", 19.2676, 105.9789),
        ("Qu·∫£ng Ninh", 21.0138, 107.9572),
        ("Thanh H√≥a", 19.8050, 105.3421),
        ("S∆°n La", 21.3256, 103.9149),
        ("H√† N·ªôi", 21.0285, 105.8542),
        ("Hu·∫ø", 16.4637, 107.5909)
    ]
    df_places = pd.DataFrame(data, columns=["name", "lat", "lon"])

st.sidebar.header("C·∫•u h√¨nh")
uploaded = st.sidebar.file_uploader("Upload file danh s√°ch (CSV: name,lat,lon) ‚Äî tu·ª≥ ch·ªçn", type=["csv"])
if uploaded:
    try:
        df_uploaded = pd.read_csv(uploaded)
        df_places = df_uploaded[["name","lat","lon"]]
        st.sidebar.success(f"ƒê√£ load {len(df_places)} ƒë·ªãa ph∆∞∆°ng t·ª´ file upload.")
    except Exception as e:
        st.sidebar.error(f"L·ªói ƒë·ªçc file upload: {e}")

# ---------- Sidebar controls ----------
st.sidebar.markdown("---")
st.sidebar.markdown("Ch·ªçn t·ªânh/th√†nh (m·ªôt ho·∫∑c nhi·ªÅu):")
choices = list(df_places["name"].astype(str))
selected = st.sidebar.multiselect("Ch·ªçn (multi) ‚Äî ho·∫∑c ch·ªçn 1 ·ªü main:", choices, default=[choices[0]])

st.sidebar.markdown("---")
st.sidebar.markdown("Tu·ª≥ ch·ªçn xu·∫•t d·ªØ li·ªáu:")
export_csv = st.sidebar.checkbox("Cho ph√©p xu·∫•t CSV", value=True)
export_json = st.sidebar.checkbox("Cho ph√©p xu·∫•t JSON", value=True)

# ---------- Main selection ----------
st.subheader("Ch·ªçn 1 t·ªânh/th√†nh (t√πy ch·ªçn):")
sel_single = st.selectbox("Ho·∫∑c ch·ªçn 1:", ["-- Kh√¥ng ch·ªçn --"] + choices)

# Merge selections
places = selected.copy()
if sel_single and sel_single != "-- Kh√¥ng ch·ªçn --" and sel_single not in places:
    places.append(sel_single)

if not places:
    st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt t·ªânh/th√†nh (t·ª´ sidebar ho·∫∑c √¥ ch·ªçn).")

# ---------- Helper: call API per coordinate ----------
API_TEMPLATE = "https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current=temperature_2m,wind_speed_10m,relative_humidity_2m,precipitation"

def call_open_meteo_current(lat, lon, timeout=10):
    url = API_TEMPLATE.format(lat=lat, lon=lon)
    try:
        resp = requests.get(url, timeout=timeout)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        return {"error": str(e)}

# ---------- Fetch button ----------
if st.button("üåç L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i"):
    results = []
    progress = st.progress(0)
    n = len(places)
    for i, pname in enumerate(places):
        row = df_places[df_places["name"].astype(str) == pname].iloc[0]
        lat, lon = row["lat"], row["lon"]
        st.info(f"L·∫•y d·ªØ li·ªáu: {pname} ‚Äî vƒ© ƒë·ªô={lat}, kinh ƒë·ªô={lon}")
        js = call_open_meteo_current(lat, lon)
        if "error" in js:
            st.error(f"L·ªói API cho {pname}: {js['error']}")
            continue
        current = js.get("current_weather") or js.get("current") or js.get("current_weather", {})
        # The API template returns 'current_weather' for some fields; else the JSON may include 'current'
        # However our explicit query uses 'current=' params; Open-Meteo sometimes places them under 'current_weather' or 'current'
        # We'll try several locations
        # First check top-level 'current_weather' keys
        temp = None; wind = None; hum = None; precip = None
        # Preferred locations for values:
        # 1) js.get("current_weather") contains temperature and windspeed (but not always humidity/precip)
        if "current_weather" in js:
            cw = js["current_weather"]
            temp = cw.get("temperature") or cw.get("temperature_2m")
            wind = cw.get("windspeed") or cw.get("wind_speed_10m")
        # 2) js.get("current") may contain explicit fields
        if "current" in js:
            c = js["current"]
            temp = temp if temp is not None else c.get("temperature_2m") or c.get("temperature")
            wind = wind if wind is not None else c.get("wind_speed_10m") or c.get("wind_speed")
            hum = c.get("relative_humidity_2m") or c.get("humidity")
            precip = c.get("precipitation") or c.get("precip")
        # 3) js.get('hourly') with 'time' equal to now (fallback)
        if temp is None or wind is None:
            hourly = js.get("hourly", {})
            times = hourly.get("time", [])
            if times:
                # find last index
                idx = len(times)-1
                try:
                    temp = temp or hourly.get("temperature_2m", [None]*len(times))[idx]
                    hum = hum or hourly.get("relative_humidity_2m", [None]*len(times))[idx]
                    precip = precip or hourly.get("precipitation", [None]*len(times))[idx]
                    wind = wind or hourly.get("wind_speed_10m", [None]*len(times))[idx]
                except Exception:
                    pass
        # Compose result
        rec = {
            "ƒê·ªãa ph∆∞∆°ng": pname,
            "lat": lat,
            "lon": lon,
            "Th·ªùi gian l·∫•y": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Nhi·ªát ƒë·ªô (¬∞C)": temp,
            "T·ªëc ƒë·ªô gi√≥ (m/s)": wind,
            "ƒê·ªô ·∫©m (%)": hum,
            "L∆∞·ª£ng m∆∞a (mm)": precip,
            "API_called": API_TEMPLATE.format(lat=lat, lon=lon)
        }
        results.append(rec)
        progress.progress(int((i+1)/n*100))
        time.sleep(0.2)  # avoid hammering the API

    if results:
        df_res = pd.DataFrame(results)
        st.subheader("K·∫øt qu·∫£ hi·ªán t·∫°i")
        st.dataframe(df_res, use_container_width=True)
        # Export options
        if export_csv:
            st.download_button("üíæ T·∫£i CSV", df_res.to_csv(index=False).encode("utf-8-sig"),
                               file_name=f"weather_now_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                               mime="text/csv")
        if export_json:
            st.download_button("üíæ T·∫£i JSON", df_res.to_json(orient="records", force_ascii=False).encode("utf-8"),
                               file_name=f"weather_now_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                               mime="application/json")
        st.success("Ho√†n t·∫•t thu th·∫≠p d·ªØ li·ªáu hi·ªán t·∫°i.")
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá thu th·∫≠p ƒë∆∞·ª£c. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c danh s√°ch t·ªânh/th√†nh.")

# ---------- Footer ----------
st.markdown("""
<div class="fixed-footer">
¬© 2025 Tr∆∞·ªùng THPT L√™ Qu√Ω ƒê√¥n ‚Äì Long B√¨nh T√¢n | Web app thu th·∫≠p d·ªØ li·ªáu th·ªùi gian th·ª±c
</div>
""", unsafe_allow_html=True)
